AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  DEFAULTREADCAPACITY:
    Type: Number
    Default: 1
    Description: Default capacity for reading from the data dynamodb table
Resources:
  data:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-data'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: acc
          AttributeType: S
        - AttributeName: dataset
          AttributeType: S
      KeySchema:
        - AttributeName: acc
          KeyType: HASH
        - AttributeName: dataset
          KeyType: RANGE
  SplitQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${AWS::StackName}-SplitQueue'
      VisibilityTimeout: '900'
  splitFiles:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: exports.splitFiles = function(event, context) {  context.succeed('OK');};
      Description: splitFiles
      Handler: index.splitFiles
      Role: !GetAtt 'LambdaSplitFilesRole.Arn'
      Runtime: nodejs8.10
      MemorySize: 256
      Timeout: 300
    DependsOn: LambdaSplitFilesRole
  runSplitQueue:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: exports.runSplitQueue = function(event, context) {  context.succeed('OK');};
      Description: runSplitQueue
      Handler: index.runSplitQueue
      Environment:
        Variables:
          DEFAULT_READ_CAPACITY: !Ref 'DEFAULTREADCAPACITY'
      Role: !GetAtt 'LambdaRunSplitQueueRole.Arn'
      Runtime: nodejs8.10
      MemorySize: 128
      Timeout: 60
    DependsOn: LambdaRunSplitQueueRole
  startSplitQueue:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: exports.startSplitQueue = function(event, context) {  context.succeed('OK');};
      Description: startSplitQueue
      Handler: index.startSplitQueue
      Environment:
        Variables:
          DEFAULT_READ_CAPACITY: !Ref 'DEFAULTREADCAPACITY'
      Role: !GetAtt 'LambdaStartSplitQueueRole.Arn'
      Runtime: nodejs8.10
      MemorySize: 128
      Timeout: 60
    DependsOn: LambdaStartSplitQueueRole
  stepSplitQueue:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: exports.stepSplitQueue = function(event, context) {  context.succeed('OK');};
      Description: stepSplitQueue
      Handler: index.stepSplitQueue
      Environment:
        Variables:
          DEFAULT_READ_CAPACITY: !Ref 'DEFAULTREADCAPACITY'
      Role: !GetAtt 'LambdaStepSplitQueueRole.Arn'
      Runtime: nodejs8.10
      MemorySize: 512
      Timeout: 900
    DependsOn: LambdaStepSplitQueueRole
  endSplitQueue:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: exports.endSplitQueue = function(event, context) {  context.succeed('OK');};
      Description: endSplitQueue
      Handler: index.endSplitQueue
      Environment:
        Variables:
          DEFAULT_READ_CAPACITY: !Ref 'DEFAULTREADCAPACITY'
      Role: !GetAtt 'LambdaEndSplitQueueRole.Arn'
      Runtime: nodejs8.10
      MemorySize: 128
      Timeout: 60
    DependsOn: LambdaEndSplitQueueRole
  datasetCleanup:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: exports.datasetCleanup = function(event, context) {  context.succeed('OK');};
      Description: datasetCleanup
      Handler: index.datasetCleanup
      Role: !GetAtt 'LambdaDatasetCleanupRole.Arn'
      Runtime: nodejs8.10
      MemorySize: 512
      Timeout: 300
    DependsOn: LambdaDatasetCleanupRole
  readAllData:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: exports.splitFile = function(event, context) {  context.succeed('OK');};
      Description: readAllData
      Handler: index.readAllData
      Role: !GetAtt 'LambdaReadAllDataRole.Arn'
      Runtime: nodejs8.10
      MemorySize: 1024
      Timeout: 3
    DependsOn: LambdaReadAllDataRole
  LambdaSplitFilesRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - !Ref 'WriteSplitQueue'
        - !Ref 'ReadUploaded'
        - !Ref 'ReadDatasets'
        - !Ref 'WriteDatasets'
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
  StateSplitQueueRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub 'states.${AWS::Region}.amazonaws.com'
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowLambda
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: RegisterEvents
                Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt 'startSplitQueue.Arn'
                  - !GetAtt 'stepSplitQueue.Arn'
                  - !GetAtt 'endSplitQueue.Arn'
                  - !GetAtt 'datasetCleanup.Arn'
  StateSplitQueue:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString: !Sub |
          {
            "StartAt": "startSplitQueue",
            "States" : {
              "startSplitQueue" : {
                "Type" : "Task",
                "Resource" : "${startSplitQueue.Arn}",
                "Next" : "WaitChoice"
              },
              "WaitChoice" : {
                "Type" : "Choice",
                "Choices" : [
                  { "Variable": "$.messageCount", "NumericGreaterThan" : 0, "Next": "QueueChoice" }
                ],
                "Default" : "QueueChoice"
              },
              "QueueChoice" : {
                "Type" : "Choice",
                "Choices" : [
                  { "Variable": "$.messageCount", "NumericGreaterThan" : 0, "Next": "stepSplitQueue" }
                ],
                "Default" : "datasetCleanup"
              },
              "stepSplitQueue" : {
                "Type" : "Task",
                "Resource" : "${stepSplitQueue.Arn}",
                "Next" : "QueueChoice",
                "Catch": [ {
                   "ErrorEquals" : ["States.ALL"],
                   "Next": "endSplitQueue"
                } ],
                "Retry" : [
                  {
                    "ErrorEquals": [ "States.Timeout" ],
                    "MaxAttempts" : 0
                  },
                  {
                    "ErrorEquals": [ "States.ALL" ],
                    "MaxAttempts": 1
                  }
                ]
              },
              "CleanupChoice" : {
                "Type" : "Choice",
                "Choices" : [
                  { "Variable": "$.messageCount", "NumericGreaterThan": 0, "Next": "datasetCleanup" }
                ],
                "Default" : "endSplitQueue"
              },
              "datasetCleanup" : {
                "Type" : "Task",
                "Resource" : "${datasetCleanup.Arn}",
                "Next" : "CleanupChoice",
                "Catch": [ {
                  "ErrorEquals" : ["States.ALL"],
                  "Next": "endSplitQueue"
                } ],
                "Retry" : [ {
                  "ErrorEquals": [ "States.Timeout" ],
                  "MaxAttempts" : 0
                },
                {
                  "ErrorEquals" : [ "States.ALL" ],
                  "MaxAttempts": 1
                } ]
              },
              "endSplitQueue" : {
                "Type" : "Task",
                "Resource" : "${endSplitQueue.Arn}",
                "End" : true,
                "Retry" : [ {
                  "ErrorEquals" : [ "States.Timeout" ],
                  "MaxAttempts": 0
                },
                {
                  "ErrorEquals": [ "States.ALL" ],
                  "MaxAttempts": 10
                } ]
              }
            }
          }
      RoleArn: !GetAtt 'StateSplitQueueRole.Arn'
  LambdaRunSplitQueueRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - !Ref 'StartExecutionStateSplitQueue'
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
  LambdaStartSplitQueueRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - !Ref 'UpdateDataTableCapacity'
        - !Ref 'ConsumeSplitQueue'
        - !Ref 'ReadDatasets'
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
  LambdaEndSplitQueueRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - !Ref 'UpdateDataTableCapacity'
        - !Ref 'ConsumeSplitQueue'
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
  LambdaStepSplitQueueRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - !Ref 'ConsumeSplitQueue'
        - !Ref 'ReadUploaded'
        - !Ref 'ReadDatasets'
        - !Ref 'WriteDatasets'
        - !Ref 'PublishSplitQueueTopic'
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
  LambdaDatasetCleanupRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - !Ref 'WriteDatasets'
        - !Ref 'ReadDatasets'
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
  scheduleSplitQueueRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub 'scheduleSplitQueueRule-${AWS::StackName}'
      Description: scheduleSplitQueue triggering event
      ScheduleExpression: rate(8 hours)
      State: ENABLED
      Targets:
        - Arn: !GetAtt 'runSplitQueue.Arn'
          Id: runSplitQueue
          Input: '{ "time": "scheduled" }'
  LambdaRunSplitQueueInvokeScheduleSplitQueuePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt 'runSplitQueue.Arn'
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !Sub 'arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/scheduleSplitQueueRule-${AWS::StackName}'
    Metadata:
      Comment: Scheduler for the runner to split files
  UploadsChangesTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Id: PushBucketNotificationPolicy
        Version: '2012-10-17'
        Statement:
          - Sid: AllowBucketToPushNotificationEffect
            Effect: Allow
            Principal:
              AWS: '*'
            Action: sns:Publish
            Resource: '*'
            Condition:
              StringEquals:
                AWS:SourceAccount: !Ref 'AWS::AccountId'
              ArnLike:
                AWS:SourceArn: !Sub 'arn:aws:s3:::${AWS::StackName}-gator'
      Topics:
        - !Ref 'UploadsChangesTopic'
  ConfChangesTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Id: PushBucketNotificationPolicy
        Version: '2012-10-17'
        Statement:
          - Sid: AllowBucketToPushNotificationEffect
            Effect: Allow
            Principal:
              AWS: '*'
            Action: sns:Publish
            Resource: '*'
            Condition:
              StringEquals:
                AWS:SourceAccount: !Ref 'AWS::AccountId'
              ArnLike:
                AWS:SourceArn: !Sub 'arn:aws:s3:::${AWS::StackName}-gator'
      Topics:
        - !Ref 'ConfChangesTopic'
  SplitQueueTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Id: LambdaNotificationPolicy
        Version: '2012-10-17'
        Statement:
          - Sid: AllowLambdaToPushNotificationEffectStepSplitQueue
            Effect: Allow
            Principal:
              AWS: '*'
            Action: sns:Publish
            Resource: '*'
            Condition:
              StringEquals:
                AWS:SourceAccount: !Ref 'AWS::AccountId'
              ArnLike:
                AWS:SourceArn: !GetAtt 'stepSplitQueue.Arn'
      Topics:
        - !Ref 'SplitQueueTopic'
  ConfChangesTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: Configuration Changes
      Subscription: []
  UploadsChangesTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: Uploaded files changes
      Subscription:
        - Endpoint: !GetAtt 'splitFiles.Arn'
          Protocol: lambda
  SplitQueueTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: Events on the Split Queue
      Subscription: []
  dataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}-gator'
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - 'GET'
            AllowedOrigins:
              - '*'
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 2
            Status: Enabled
            Prefix: sessions/
      NotificationConfiguration:
        TopicConfigurations:
          - Event: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: uploads/
            Topic: !Ref 'UploadsChangesTopic'
          - Event: s3:ObjectRemoved:*
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: uploads/
            Topic: !Ref 'UploadsChangesTopic'
          - Event: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: conf
            Topic: !Ref 'ConfChangesTopic'
          - Event: s3:ObjectRemoved:*
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: conf
            Topic: !Ref 'ConfChangesTopic'
    DependsOn:
      - UploadsChangesTopicPolicy
      - ConfChangesTopicPolicy
  SplitFilesUploadChangesPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt 'splitFiles.Arn'
      Principal: sns.amazonaws.com
      SourceArn: !Ref 'UploadsChangesTopic'
    DependsOn: splitFiles
  LambdaReadAllDataRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - !Ref 'ReadDatasets'
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action: sts:AssumeRole
  ReadUploaded:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Read data uploaded to gator
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource:
              - !Sub 'arn:aws:s3:::${AWS::StackName}-gator/uploads/*'
  WriteDatasets:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Write split json files
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:DeleteObject
            Resource:
              - !Sub 'arn:aws:s3:::${AWS::StackName}-gator/data/latest/*'
          - Effect: Allow
            Action:
              - s3:ListBucket
            Resource:
              - !Sub 'arn:aws:s3:::${AWS::StackName}-gator'
            Condition:
              StringLike:
                s3:prefix:
                  - data/latest/*
          - Effect: Allow
            Action:
              - dynamodb:BatchWriteItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:GetItem
            Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${data}'
  ReadDatasets:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Read datasets
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource:
              - !Sub 'arn:aws:s3:::${AWS::StackName}-gator/data/latest/*'
          - Effect: Allow
            Action:
              - dynamodb:BatchGetItem
              - dynamodb:GetItem
              - dynamodb:Query
              - dynamodb:Scan
            Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${data}'
  ConsumeSplitQueue:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: ConsumeSplitQueue
      PolicyDocument:
        Id: ConsumeSplitQueue
        Version: '2012-10-17'
        Statement:
          - Sid: ConsumeSplitQueueSQS
            Effect: Allow
            Action:
              - sqs:ReceiveMessage
              - sqs:GetQueueUrl
              - sqs:ChangeMessageVisibility
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
            Resource: !GetAtt 'SplitQueue.Arn'
    DependsOn: SplitQueue
  WriteSplitQueue:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: WriteSplitQueue
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: WriteSplitQueue
            Effect: Allow
            Action: sqs:SendMessage
            Resource: !GetAtt 'SplitQueue.Arn'
  PublishSplitQueueTopic:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: PublishSplitQueueTopic
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - sns:Publish
            Effect: Allow
            Resource:
              - !Ref 'SplitQueueTopic'
  StartExecutionStateSplitQueue:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: StartExecutionStateSplitQueue
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - states:StartExecution
              - states:ListExecutions
            Resource:
              - !Ref 'StateSplitQueue'
  UpdateDataTableCapacity:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Update capacity for writing to data table
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:UpdateTable
            Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${data}'
Outputs: {}
